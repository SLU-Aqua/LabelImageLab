from dataclasses import dataclass


@dataclass(frozen=True)
class StringBundle:
    # openFile: str = "Open"
    # openFileDetail: str = "Open image or label file"
    quit: str = "Quit"
    quitApp: str = "Quit application"
    openDir: str = "Open Dir"
    copyPrevBounding: str = "Copy previous Bounding Boxes in the current image"
    changeSavedAnnotationDir: str = "Change default saved Annotation dir"
    # openAnnotation: str = "Open Annotation"
    # openAnnotationDetail: str = "Open an annotation file"
    changeSaveDir: str = "Change Save Dir"
    nextImg: str = "Next Image"
    nextImgDetail: str = "Open the next Image"
    prevImg: str = "Prev Image"
    prevImgDetail: str = "Open the previous Image"
    verifyImg: str = "Verify Image"
    verifyImgDetail: str = "Verify Image"
    warningImg: str = "Warning Image"
    waningImgDetail: str = "Add warning to Image"
    verifyAndNextImg: str = "Verify and next Image"
    verifyAndNextImgDetail: str = "Verify the image and open the next Image"
    save: str = "Save"
    saveDetail: str = "Save the labels to a file"
    # changeSaveFormat: str = "Change save format"
    # saveAs: str = "Save As"
    # saveAsDetail: str = "Save the labels to a different file"
    closeCur: str = "Close"
    closeCurDetail: str = "Close the current file"
    deleteImg: str = "Delete current image"
    deleteImgDetail: str = "Delete the current image"
    resetAll: str = "Reset All"
    resetAllDetail: str = "Reset All"
    boxLineColor: str = "Box Line Color"
    boxLineColorDetail: str = "Choose Box line color"
    crtBox: str = "Create RectBox"
    crtBoxDetail: str = "Draw a new box"
    delBox: str = "Delete RectBox"
    delBoxDetail: str = "Remove the box"
    editBox: str = "&Edit RectBox"
    editBoxDetail: str = "Move and edit Boxs"
    hideAllBox: str = "&Hide RectBox"
    showAllBox: str = "&Show RectBox"
    info: str = "Information"
    zoomin: str = "Zoom In"
    zoominDetail: str = "Increase zoom level"
    zoomout: str = "Zoom Out"
    zoomoutDetail: str = "Decrease zoom level"
    originalsize: str = "Original size"
    originalsizeDetail: str = "Zoom to original size"
    fitWin: str = "Fit Window"
    fitWinDetail: str = "Zoom follows window size"
    fitWidth: str = "Fit Width"
    fitWidthDetail: str = "Zoom follows window width"
    lightbrighten: str = "Brighten"
    lightbrightenDetail: str = "Increase Image Brightness"
    lightdarken: str = "Darken"
    lightdarkenDetail: str = "Decrease Image Brightness"
    lightreset: str = "Original Brightness"
    lightresetDetail: str = "Restore original brightness"
    lightWidgetTitle: str = "Image Brightness"
    editLabel: str = "Edit Label"
    editLabelDetail: str = "Modify the label of the selected Box"
    shapeLineColor: str = "Shape Line Color"
    shapeLineColorDetail: str = "Change the line color for this specific shape"
    shapeFillColor: str = "Shape Fill Color"
    shapeFillColorDetail: str = "Change the fill color for this specific shape"
    showHide: str = "Show/Hide Label Panel"
    useDefaultLabel: str = "Use default label"
    boxLabelText: str = "Box Labels"
    labels: str = "Labels"
    autoSaveMode: str = "Auto Save mode"
    singleClsMode: str = "Single Class Mode"
    displayLabel: str = "Display Labels"
    fileList: str = "File List"
    files: str = "Files"
    # advancedMode: str = "Advanced Mode"
    # advancedModeDetail: str = "Swtich to advanced mode"
    showAllBoxDetail: str = "Show all bounding boxes"
    hideAllBoxDetail: str = "Hide all bounding boxes"
    menu_file: str = "&File"
    menu_edit: str = "&Edit"
    menu_view: str = "&View"
    menu_help: str = "&Help"
    menu_openRecent: str = "Open &Recent"
    chooseLineColor: str = "Choose Line Color"
    chooseFillColor: str = "Choose Fill Color"
    # drawSquares: str = "Draw Squares"

    def get_str(self, string_id: str):
        # print(self.__dict__)
        assert string_id in self.__dict__, f"Missing string id: {string_id}."
        return self.__dict__[string_id]
